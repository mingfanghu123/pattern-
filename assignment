"""Plot three precision-recall curves (on a single plot) for a random classifier applied in
each of the three cases. Here, a “random classifier” will classify each test point with
50% likelihood of assigning the positive class and 50% likelihood of negative.
"""
true=[0]*100+[1]*100
numpy.random.shuffle(true)
estimate = numpy.random.random(200)
precision,recall,threshold=precision_recall_curve(true,estimate)
plt.plot(recall,precision)
plt.xlim(0,1)
plt.ylim(0,1)
plt.xlabel("recall")
plt.ylabel("precision")
plt.show()
plt.plot(recall[0],precision[0],'r*')
plt.plot(recall[199],precision[199],'r*')
plt.plot(recall[100],precision[100],'r*')
trueb=[1]*100+[0]*1000
numpy.random.shuffle(trueb)
estimateb= numpy.random.random(1100)
precisionb,recallb,thresholdb=precision_recall_curve(trueb,estimateb)
plt.figure()
plt.plot(recallb,precisionb)
plt.xlim(0,1)
plt.ylim(0,1)
plt.xlabel("recall")
plt.ylabel("precision")
plt.show()
plt.plot(recallb[0],precisionb[0],'r*')
plt.plot(recallb[1009],precisionb[1009],'r*')
plt.plot(recallb[550],precisionb[550],'r*')
truec=[0]*20+[1]*20
numpy.random.shuffle(truec)
estimatec= numpy.random.random(40)
precisionc,recallc,thresholdc=precision_recall_curve(truec,estimatec)
plt.figure()
plt.plot(recallc,precisionc)
plt.xlim(0,1)
plt.ylim(0,1)
plt.xlabel("recall")
plt.ylabel("precision")
plt.show()
plt.plot(recallc[0],precisionc[0],'r*')
plt.plot(recallc[39],precisionc[39],'r*')
plt.plot(recallc[20],precisionc[20],'r*')
